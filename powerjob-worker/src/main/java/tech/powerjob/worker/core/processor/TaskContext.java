package tech.powerjob.worker.core.processor;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import tech.powerjob.worker.common.PowerJobWorkerConfig;
import tech.powerjob.worker.log.OmsLogger;

/**
 * task context
 * The concept is unified, all workers only deal with Task, the concept of Job and JobInstance only exists in Server and TaskTracker
 * Stand-alone task: the entire Job becomes a Task
 * Broadcast task: the whole job becomes a bunch of the same Task
 * MR task: all mapped tasks are regarded as sub-tasks of the root task
 * <p>
 * 2021/02/04 remove fetchUpstreamTaskResult method
 *
 * @author tjq
 * @author Echo009
 * @since 2020/3/18
 */
@Getter
@Setter
@ToString
@Slf4j
public class TaskContext {

    private Long jobId;

    private Long instanceId;

    private Long subInstanceId;

    private String taskId;

    private String taskName;
    /**
     * Parameters passed through the console
     */
    private String jobParams;
    /**
     * Task instance running parameters
     * If the task instance is triggered through OpenAPI, this value is the parameter passed by OpenAPI
     * If the task is a node of the workflow, this value is the context of the workflow instance ( wfContext )
     */
    private String instanceParams;
    /**
     * Maximum number of retries
     */
    private int maxRetryTimes;
    /**
     * Current number of retries
     */
    private int currentRetryTimes;
    /**
     * Subtask object, generated by map method of Map/MapReduce processor
     */
    private Object subTask;
    /**
     * Online logging
     */
    @JsonIgnore
    private OmsLogger omsLogger;
    /**
     * User-defined context, initialized via {@link PowerJobWorkerConfig}
     */
    private Object userContext;
    /**
     * Workflow context data
     */
    private WorkflowContext workflowContext;

}
